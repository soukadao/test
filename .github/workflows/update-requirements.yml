name: Update Requirements
on:
  issue_comment:
    types: [created]
jobs:
  update_requirements:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'doc-type:requirements') && contains(github.event.issue.labels.*.name, 'doc-state:draft')
    permissions:
      contents: read
    outputs:
      final_message: ${{ steps.run_codex.outputs.final-message }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Update Requirements Document
        id: run_codex
        uses: openai/codex-action@v1
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          prompt: |
            This is issue #${{ github.event.issue.number }} for ${{ github.repository }}.

            Current requirement document:
            ----
            ${{ github.event.issue.body }}
            ----

            User comment requesting update:
            ----
            ${{ github.event.comment.body }}
            ----

            Please update the requirements document based on the user's comment.

            CRITICAL LANGUAGE REQUIREMENT:
            - **First, detect the language used in the current requirement document above**
            - **ALL content in the updated document MUST be in the SAME LANGUAGE**, including:
              - Section headers (e.g., "Requirements Document" or "要件定義書")
              - Subsection titles (e.g., "Requirements (To-Be)" or "要件（To-Be）")
              - Table headers (e.g., "ID", "Requirement" or "ID", "要件")
              - All requirement descriptions
              - Date labels (e.g., "Created", "Last Updated" or "作成日", "最終更新")
              - Comments and notes

            Document structure template (the structure below is just for reference - translate ALL text to match the language of the current document):

            > [!NOTE]
            > Generated by AI.

            # Requirements Document

            Created: [Keep original date] Last Updated: ${{ github.event.comment.created_at }}

            ## Requirements (To-Be)

            <!--
            Convert the requirements into a table format:

            |       ID       |     Requirement    |
            | -------------- | ------------------ |
            | R001           | [First requirement]   |
            | R002           | [Second requirement]  |

            - Extract all requirements from the issue
            - Number them sequentially as R001, R002, R003, etc.
            - Be specific and concise
            -->

            Guidelines:
            - **MOST IMPORTANT: Use the EXACT SAME LANGUAGE as the current document for ALL text content**
            - MUST preserve the exact structure and markdown formatting from the template above
            - Keep the original "Created" date value unchanged (copy from the current document)
            - Update "Last Updated" date value to the current comment timestamp
            - Update only the relevant sections based on the comment
            - Add new requirements with sequential IDs (continue from existing IDs: R001, R002, etc.)
            - Modify existing requirements if requested
            - Remove requirements if explicitly requested
            - When adding/modifying content, match the writing style and detail level of the original
            - Return ONLY the complete updated document with no additional commentary or explanation

  update_issue:
    runs-on: ubuntu-latest
    needs: update_requirements
    permissions:
      issues: write
    steps:
      - name: Update Issue
        uses: actions/github-script@v8
        env:
          CODEX_FINAL_MESSAGE: ${{ needs.update_requirements.outputs.final_message }}
        with:
          github-token: ${{ github.token }}
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: process.env.CODEX_FINAL_MESSAGE,
            });
