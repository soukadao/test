name: Create Spec
on:
  issues:
    types: [closed]
jobs:
  create_spec:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'doc-type:requirements') && contains(github.event.issue.labels.*.name, 'doc-state:draft')
    permissions:
      issues: read
      contents: read
    outputs:
      final_message: ${{ steps.run_codex.outputs.final-message }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Create Spec Documents
        id: run_codex
        uses: openai/codex-action@v1
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          output-schema-file: ./.github/schema/create-spec.json
          prompt: |
            Based on the following requirements document, create detailed feature specifications.

            # Requirements Document

            ${{ github.event.issue.body }}

            ---

            Please create feature specification documents with the following structure for each feature:

            > [!NOTE]
            > Generated by AI.

            # Feature Specification

            Created: [FORMAT_DATE] Last Updated: [FORMAT_DATE]

            Requirements Document: #${{ github.event.issue.number }}

            ## [Feature Name]

            <!--
            Example

            ## [Feature Name]

            ### User Story

            xxxxxxxxxxxxxxxxxxxxx

            ### Functional Requirements

            - aaa
            - bbb
            - ccc

            ### Non-Functional Requirements

            - aaa
            - bbb
            - ccc

            ### Test Cases

            - aaa
            - bbb
            - ccc

            ## [Feature Name]

            ### User Story

            xxxxxxxxxxxxxxxxxxxxx

            ### Functional Requirements

            - aaa
            - bbb
            - ccc

            ### Non-Functional Requirements

            - aaa
            - bbb
            - ccc

            ### Test Cases

            - aaa
            - bbb
            - ccc

            ...
            -->

            ### User Story

            <!-- Describe the value of implementing this feature -->

            ### Functional Requirements

            <!-- List the requirements needed for this feature in bullet points -->

            ### Non-Functional Requirements

            <!-- List the non-functional requirements needed for this feature in bullet points -->

            ### Libraries and Packages

            <!-- Describe the libraries and packages used for this feature -->

            ### Input Parameters

            <!-- Define the input parameters needed for this feature -->

            ### Output Parameters

            <!-- Define the output parameters needed for this feature -->

            ### Test Cases

            <!-- List test cases in bullet points. Include edge cases to ensure comprehensive testing -->

            Guidelines:
            - Detect the language of the requirements document and use that language for the entire specification document
            - Generate the entire document in the same language as the requirements document (including headers, labels, and all text)

  create_issue:
    runs-on: ubuntu-latest
    needs: create_spec
    permissions:
      issues: write
    steps:
      - name: Update Issue
        uses: actions/github-script@v8
        env:
          CODEX_FINAL_MESSAGE: ${{ needs.create_spec.outputs.final_message }}
        with:
          github-token: ${{ github.token }}
          script: |
            const json = JSON.parse(process.env.CODEX_FINAL_MESSAGE);

            await Promise.all(json.documents.map(async (document) => {
              return github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: document.title,
                body: document.body,
                labels: ['doc-type:spec','doc-state:draft']
              });
            }));

  label_management:
    runs-on: ubuntu-latest
    needs: create_issue
    permissions:
      issues: write
    steps:
      - run: gh issue edit "$NUMBER" --add-label "$ADD_LABEL" --remove-label "$REMOVE_LABEL"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          NUMBER: ${{ github.event.issue.number }}
          ADD_LABEL: doc-state:completed
          REMOVE_LABEL: doc-state:draft
