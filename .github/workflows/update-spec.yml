name: Update Spec
on:
  issue_comment:
    types: [created]
jobs:
  update_spec:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'doc-type:spec') && contains(github.event.issue.labels.*.name, 'doc-state:draft')
    permissions:
      contents: read
    outputs:
      final_message: ${{ steps.run_codex.outputs.final-message }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Update Spec Document
        id: run_codex
        uses: openai/codex-action@v1
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          prompt: |
            This is issue #${{ github.event.issue.number }} for ${{ github.repository }}.

            Current specification document:
            ----
            ${{ github.event.issue.body }}
            ----

            User comment requesting update:
            ----
            ${{ github.event.comment.body }}
            ----

            Please update the specification document based on the user's comment.

            CRITICAL LANGUAGE REQUIREMENT:
            - **First, detect the language used in the current specification document above**
            - **ALL content in the updated document MUST be in the SAME LANGUAGE**, including:
              - Section headers (e.g., "Feature Specification" or "機能仕様書")
              - Subsection titles (e.g., "User Story", "Functional Requirements" or "ユーザーストーリー", "機能要件")
              - Table headers and labels
              - All requirement descriptions
              - Date labels (e.g., "Created", "Last Updated" or "作成日", "最終更新")
              - Comments and notes

            Document structure template (the structure below is just for reference - translate ALL text to match the language of the current document):

            > [!NOTE]
            > Generated by AI.

            # Feature Specification

            Created: [Keep original date] Last Updated: ${{ github.event.comment.created_at }}

            Requirements Document: [Keep original reference]

            ## [Feature Name]

            ### User Story

            [Content here]

            ### Functional Requirements

            - [Requirements list]

            ### Non-Functional Requirements

            - [Non-functional requirements list]

            ### Libraries and Packages

            [Libraries and packages description]

            ### Input Parameters

            [Input parameters definition]

            ### Output Parameters

            [Output parameters definition]

            ### Test Cases

            - [Test cases list]

            Guidelines:
            - **MOST IMPORTANT: Use the EXACT SAME LANGUAGE as the current document for ALL text content**
            - MUST preserve the exact structure and markdown formatting from the template above
            - Keep the original "Created" date value unchanged (copy from the current document)
            - Update "Last Updated" date value to the current comment timestamp
            - Keep the Requirements Document reference unchanged
            - Update only the relevant sections based on the comment
            - Add new sections or items if requested
            - Modify existing content if requested
            - Remove content if explicitly requested
            - When adding/modifying content, match the writing style and detail level of the original
            - Return ONLY the complete updated document with no additional commentary or explanation

  update_issue:
    runs-on: ubuntu-latest
    needs: update_spec
    permissions:
      issues: write
    steps:
      - name: Update Issue
        uses: actions/github-script@v7
        env:
          CODEX_FINAL_MESSAGE: ${{ needs.update_spec.outputs.final_message }}
        with:
          github-token: ${{ github.token }}
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: process.env.CODEX_FINAL_MESSAGE,
            });
